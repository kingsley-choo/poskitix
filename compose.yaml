version: '3.8'
services:
  ####################################
  # MySQL Database  
  ####################################
  database:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: example
    restart: always
    ports:
      - '3306:3306'
    expose:
      - 3306
    volumes:
      - db:/var/lib/mysql
      - ./database/:/docker-entrypoint-initdb.d/

  ####################################
  # User microservice  
  ####################################
  user:
    build:
      context: ./users
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/user
      PYTHONUNBUFFERED: 1
    ports:
      - '5001:5001'
    depends_on:
      - database

  ####################################
  # Event microservice  
  ####################################
  event:
    build:
      context: ./event
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/event
      PYTHONUNBUFFERED: 1
    ports:
      - '5002:5002'
    depends_on:
      - database

  ####################################
  # Queue microservice  
  ####################################
  queue:
    build:
      context: ./queue
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/queue
      PYTHONUNBUFFERED: 1
    ports:
      - '5004:5004'
    depends_on:
      - database


  ####################################
  # Ticket microservice  
  ####################################
  ticket:
    build:
      context: ./ticket
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/ticket
      PYTHONUNBUFFERED: 1
    ports:
      - '5003:5003'
    depends_on:
      - database

  ####################################
  # Notification microservice  
  ####################################
  notification:
    # restart: on-failure
    build:
      context: ./notification
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'amqp://rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports: 
      - "1234:1234"

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    build: 
      context:  ./
      dockerfile: rabbit.Dockerfile
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5

 
volumes:
  db:
    driver: local
  rabbitmq_data: