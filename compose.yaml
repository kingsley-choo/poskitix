version: '3.8'
services:
  ####################################
  # MySQL Database  
  ####################################
  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: example
    restart: always
    ports:
      - '3306:3306'
    expose:
      - 3306
    volumes:
      - db:/var/lib/mysql
      - ./database/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      interval: 10s
      timeout: 5s
      retries: 10

  ####################################
  # User microservice (Java)
  ####################################
  user:
    build:
      context: ./simple_microservice/user-java
      dockerfile: Dockerfile
    environment:
      - MYSQL_HOST=database
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=example
    ports:
      - "5001:5001"
    depends_on:
      database:
          condition: service_healthy


  ####################################
  # Event microservice  (PHP)
  ####################################
  event:
    # volumes:
    #   - "./simple_microservice/event-php:/var/www/html"
    ports:
      - 5002:80
    build: ./simple_microservice/event-php
    depends_on:
      database:
        condition: service_healthy

  ####################################
  # Queue microservice  
  ####################################
  queue:
    build:
      context: ./simple_microservice/queue
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/queue
      PYTHONUNBUFFERED: 1
      MAX_PEOPLE_READY: 4
      MAX_MINUTES_READY : 5
    ports:
      - '5004:5004'
    depends_on:
      database:
          condition: service_healthy

  ####################################
  # Payment microservice  
  ####################################
  payment:
    build:
      context: ./simple_microservice/payment
      dockerfile: Dockerfile
    environment:
      YOUR_DOMAIN : http://localhost
    ports:
      - '5005:5005'
    depends_on:
      database:
          condition: service_healthy

  ####################################
  # Ticket microservice  
  ####################################
  ticket:
    build:
      context: ./simple_microservice/ticket
      dockerfile: Dockerfile
    environment:
      dbURL: mysql+mysqlconnector://root:example@database:3306/ticket
      PYTHONUNBUFFERED: 1
    ports:
      - '5003:5003'
    depends_on:
      database:
          condition: service_healthy

  ####################################
  # Notification microservice  
  ####################################
  notification:
    # restart: on-failure
    build:
      context: ./simple_microservice/notification
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'amqp://rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy

  ####################################
  # Check payment microservice  
  ####################################
  check_payment:
    # restart: on-failure
    build:
      context: ./complex_microservice/check_payment
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - '5400:5400'

  ####################################
  # Get details microservice  
  ####################################
  get_details:
    # restart: on-failure
    build:
      context: ./complex_microservice/get_details
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - '5010:5010'

  ####################################
  # Join queue microservice  
  ####################################
  join_queue:
    # restart: on-failure
    build:
      context: ./complex_microservice/join_queue
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - '5100:5100'

  ####################################
  # Process ticket (cron) microservice  
  ####################################
  process_ticket:
    # restart: on-failure
    build:
      context: ./complex_microservice/process_ticket
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - '5200:5200'

  ####################################
  # Purchase ticket microservice  
  ####################################
  purchase_ticket:
    # restart: on-failure
    build:
      context: ./complex_microservice/purchase_ticket
      dockerfile: Dockerfile
    environment:
      RABBIT_URL : 'rabbitmq'
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - '5300:5300'


  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    build: 
      context:  ./
      dockerfile: rabbit.Dockerfile
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 10s
      timeout: 5s
      retries: 5
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.

  httpd:
    image: httpd 
    restart: always
    volumes: 
      - ./user_interface:/usr/local/apache2/htdocs/
    ports:
      - "80:80"
    depends_on:
      database:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy 

volumes:
  db:
    driver: local
  rabbitmq_data:
  pgdata: